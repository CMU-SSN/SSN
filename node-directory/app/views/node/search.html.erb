<div class="fullPage">
  <div class="searchContent row">
    <div class="searchInnerContent">
      <h1>SSN Directory Search</h1>
      <%= form_tag root_path do %>
        <%= text_field_tag 'q', @query, :placeholder => "Enter search here", :type => "search" %>
        <%= submit_tag 'Search' %>
      <% end %>
    </div>
  </div>
  <div class="resultsMapContent row">
    <div class="resultsContent col scroll-y">
      <% # Display results if a search has been made  %>
      <% if not @results.nil? %>
        <% # A search was done. Display results or sorry if none  %>
        <% if @results.length > 0 %>
          <% # Only show PAGE_SIZE results (there might be more for paging)  %>
          <% @results.slice(0, NodeHelper::PAGE_SIZE).each do |result| %>
            <%= link_to(result.link) do%>
            <div>
              <b><%= result.name %></b><br />
              <%= result.address %><br />
              (<%= result.distance%> miles away)
            </div><br />
            <% end %>
          <% end %>
          <% # Pagination controls %>
          <% # If we are not at the first page, show "Previous"   %>
          <div class="center">
            <% if not @page_num.nil? and @page_num.to_i > 0 %>
              <%= link_to "Previous", node_search_path(:q => @query, :page => (@page_num.to_i - 1).to_s), :data => {:role => 'button', :icon => 'arrow-l', :iconpos => 'left', :theme => 'b', :inline => true} %>
            <% end %>
            <% if @results.length > NodeHelper::PAGE_SIZE %>
              <%= link_to "Next", node_search_path(:q => @query, :page => (@page_num.to_i + 1).to_s), :target => "_blank", :data => {:role => 'button', :icon => 'arrow-r', :iconpos => 'right', :theme => 'b', :inline => true} %>
            <% end %>
          </div>
        <% else %>
          <div class="center">
            <h3>Sorry, no results were found...</h3>
          </div>
        <% end %>
      <% end %>
    </div>
    <div class="mapContent col">
      <div id="map-canvas"></div>
    </div>
  </div>
</div>

<script type="text/javascript">
  var map;
  var results = <%= @results.to_json.html_safe %>;
  var infowindow = new google.maps.InfoWindow();

  // Do a search on the user's location
  function positionSuccess(position) {
    var coords = position.coords || position.coordinate || position;
    doSearch(coords.latitude, coords.longitude);
  }

  // Searches for a specified lat long
  function doSearch(latitude, longitude) {
    window.location = "?q=(" + latitude + "," + longitude + ")";
  }

  // Loads the map.
  function loadMap(lat, lng, bounds) {
    var latLng = new google.maps.LatLng(lat, lng);
    var mapOptions = {
      center: latLng,
      zoom: 14,
      disableDefaultUI: true,
      panControl: true,
      zoomControl: true,
      mapTypeControl: true,
      scaleControl: true,
      streetViewControl: true,
      overviewMapControl: true,
      mapTypeId: google.maps.MapTypeId.HYBRID
    };
    map = new google.maps.Map(document.getElementById("map-canvas"),
        mapOptions);

    // If bounds were specified, ensure they fit.
    if (bounds) {
      map.fitBounds(bounds);
    }

    // Search for locations near where the user clicked.
    google.maps.event.addListener(map, 'click', function(e) {
      doSearch(e.latLng.lat(), e.latLng.lng());
    });

    // Add a marker for each result if they exist
    if (results != null) {
      for (var i = 0; i < results.length; i++) {
        // Add the marker
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(results[i].latitude,
                                             results[i].longitude),
            map: map,
            title: results[i].name
        });

        // Add infowindow for when the marker is clicked
        google.maps.event.addListener(marker, 'click', (function(marker, res) {
          return function() {
            infowindow.setContent($("<a>").attr("href", res.link).text(res.name));
            infowindow.open(map, marker);
          }
        })(marker, results[i]));
      }
      
    }
  }

  // Loads the map on location error. Center on Palo Alto.
  function positionError() {
    loadMap(37.44836, -122.137732, null);
  }

  // Initialize the map, centered on Palo Alto, CA.
  function initialize() {
    // Try to center map on user's location if location is supported and there
    // was not a query (resuls is nil)
    if (navigator.geolocation && results == null) {
      navigator.geolocation.getCurrentPosition(positionSuccess,
                                               positionError);
    } else {
      // There is a query, try to get it from there.

      // Add all results to the bounding box so we can center on those
      var bounds =  new google.maps.LatLngBounds();
      for (var i = 0; i < results.length; i++) {
        bounds.extend(new google.maps.LatLng(results[i].latitude,
                                             results[i].longitude));
      }

      // Center on palo alto if there are no results
      if (results.length == 0) {
        loadMap(37.44836, -122.137732, null);
      } else {
        loadMap(bounds.getCenter().lat(), bounds.getCenter().lng(), bounds);
      }
    }  
  }
  google.maps.event.addDomListener(window, 'load', initialize);
</script>
